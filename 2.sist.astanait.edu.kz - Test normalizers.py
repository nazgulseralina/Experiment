#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler, PowerTransformer, QuantileTransformer, Normalizer, FunctionTransformer, PolynomialFeatures
from sklearn.metrics import classification_report, f1_score

# Загрузка датасета Credit Card Fraud Detection Dataset
# колонка "Class" с метками классов (0 для нормальных транзакций, 1 для мошеннических)
df = pd.read_csv('creditcard.csv')

# Разделение данных на признаки (X) и метки классов (y)
X = df.drop('Class', axis=1)
y = df['Class']

# Разделение данных на обучающий и тестовый наборы
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Применение методов нормализации данных
scalers = [StandardScaler(), MinMaxScaler(), RobustScaler(), PowerTransformer(), QuantileTransformer(), Normalizer(), FunctionTransformer(), PolynomialFeatures()]

for scaler in scalers:
    # Нормализация данных
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Обучение модели AdaBoost
    ada_boost = AdaBoostClassifier(n_estimators=50, random_state=42)
    ada_boost.fit(X_train_scaled, y_train)

    # Получение предсказаний
    y_pred = ada_boost.predict(X_test_scaled)

    # Оценка качества модели с использованием F1-score
    f1 = f1_score(y_test, y_pred)
    print(f"F1-score for {type(scaler).__name__} with AdaBoost: {f1}")
    print("\n")


# #Постановка задачи:#
# 
# разработка модели выявления аномальных банковских транзакций на основе машинного обучения на основе набора данных CreditCardFraud, состоящий из более чем 500 тысяч банковских транзакций с помощью банковских карт.
# Используем алгоритм AdaBoost.
# AdaBoost (Adaptive Boosting) — это алгоритм машинного обучения, который используется для повышения производительности слабых моделей (например, деревьев решений) с помощью комбинирования их в одну сильную модель. Этот алгоритм широко применяется в задачах классификации и регрессии. Вот основные шаги работы алгоритма AdaBoost:
# 
# 1. Инициализация весов: Каждый объект в обучающем наборе начально имеет одинаковый вес.
# 2. Обучение слабой модели: Обучается слабая модель (например, дерево решений) на обучающем наборе с использованием текущих весов объектов. Модель выбирается так, чтобы минимизировать ошибку на текущем наборе данных.
# 3. Оценка ошибки: Рассчитывается взвешенная ошибка (взвешенная относительно весов объектов) слабой модели на обучающем наборе.
# 4. Вычисление веса модели: Рассчитывается вес для слабой модели на основе её ошибки. Модели с меньшей ошибкой получают больший вес.
# 5. Обновление весов объектов:Веса объектов обновляются таким образом, чтобы больший вес был у объектов, на которых модель ошиблась.
# 
# Повторение:
# Шаги 2-5 повторяются заданное количество раз (количество итераций), создавая последовательность слабых моделей.
# Совмещение моделей: Сильная модель формируется путем взвешенной комбинации слабых моделей. Веса моделей определяются их производительностью на обучающем наборе.
# AdaBoost хорошо работает в ситуациях, где слабые модели представляют некоторую предсказательную силу, но они не идеальны. Он активно корректирует ошибки предыдущих моделей, фокусируясь на тех объектах, на которых предыдущие модели совершали ошибки.

# Входные данные
# Датасет по ссылке {https://www.kaggle.com/code/kasiviswanath00/credit-cardfraud/input?select=fraud_data.csv}
# Признаки V1, V2, …, V28 являются основными компонентами, полученные с помощью метода главных компонент.  Единственными открытыми признаками являются признаки «Time» и «Amount». 
# 
# Признак «Time» содержит
# секунды, прошедшие между каждой транзакцией и первой транзакцией в наборе данных.
# 
# Признак «Amount» отображает сумму транзакции. 
# 
# Признак «Class» является меткой правильного ответа, которая принимает значение 1 в случае мошенничества и 0 в противном случае.

# #В модели выявления аномальных банковских транзакций есть набор данных M, который состоит из 21693 транзакций, метка ответа, показывающая, является лиданная транзакция незаконной или законной. С каждой транзакцией связан вектор признаков, состоящий из 30 значений. Для
# целевой функции f требуется определить, является ли конкретная транзакция m незаконной (в этом случае он принимается за 1) или
# законным (в этом случае принимается значение 0). Целевая функция f может быть найдена с помощью одного из алгоритма машинно-
# го обучения для набора из n помеченных транзакций.
# 
# Поскольку задача сводится к тому, что нужно определить является ли данная транзакция законной или незаконной, то в общем
# виде это представляется как задача бинарной классификации, где за положительный класс, это набор незаконных транзакций, а
# за отрицательный незаконные.
# Далее, рассмотрим общие метрики оценки, используемые в моделях машинного обучения.
# Доля правильных ответов (Accuracy), показатель того, как часто классификатор делает правильные предсказания, и равен
# , где TP (True Positive) , это число положительных результатов, которые были корректно
# предсказаны моделью и принадлежат к положительному классу; 
# TN (True Negative), это число отрицательных результатов, которые
# были корректно предсказаны моделью и
# принадлежат к отрицательному классу; 
# 
# FP(False Positive), это число положительных
# результатов, которые были некорректно
# предсказаны моделью и принадлежат к отрицательному классу; FN (False Negative), это
# число отрицательных результатов, которые
# были некорректно предсказаны моделью и
# принадлежат к положительному классу. Значения FP и FN также часто называют ошибка-
# ми первого и второго рода.
# 
# Точность (Precision), это показатель,
# измеряющий коэффициент правильности
# классификатора, когда он правильно предсказывает положительную метку класса для
# положительного класса.
# Полнота (Recall), это показатель,
# оценивающий как часто классификатор предсказывает положительную метку для данных,
# когда данные действительно принадлежат положительному классу.

# In[ ]:




